{"ast":null,"code":"import { animate, style } from '@angular/animations';\nimport { animations } from '../data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/animations\";\nexport let ContentAnimDirective = /*#__PURE__*/(() => {\n  class ContentAnimDirective {\n    constructor(el, animationBuilder) {\n      this.el = el;\n      this.animationBuilder = animationBuilder;\n      this.aniName = 'fadeIn';\n      this.duration = '.8s';\n      this.offset = 0;\n      this.first = true;\n    }\n    ngOnInit() {}\n    ngAfterViewInit() {\n      this.el.nativeElement.classList.add('appear-animate');\n      this.createAnimation();\n      setTimeout(() => {\n        this.handleAnimation();\n        let slider = this.el.nativeElement.closest('owl-carousel');\n        let self = this;\n        if (slider) {\n          $(slider).on('translate.owl.carousel', () => {\n            if (self.el.nativeElement.closest('.owl-item:not(.active)')) {\n              self.el.nativeElement.classList.add('appear-animate');\n            }\n          });\n          $(slider).on('translated.owl.carousel', () => {\n            if (self.el.nativeElement.closest('.owl-item.active')) {\n              if (self.el.nativeElement.classList.contains('appear-animate')) {\n                self.el.nativeElement.classList.remove('appear-animate');\n                this.player.play();\n                this.first = false;\n              }\n            } else {\n              self.el.nativeElement.classList.add('appear-animate');\n            }\n          });\n        }\n      }, 300);\n    }\n    onscroll() {\n      this.handleAnimation();\n    }\n    handleAnimation() {\n      let rect = this.el.nativeElement.getBoundingClientRect();\n      if ((window.innerHeight > rect.top && rect.top > 0 || rect.bottom > 0 && rect.bottom < window.innerHeight) && this.first) {\n        if (this.el.nativeElement.closest('owl-carousel') && !this.el.nativeElement.closest('.owl-item.active')) return;\n        this.player.play();\n        this.first = false;\n      }\n    }\n    createAnimation() {\n      this.player = this.animationBuilder.build([style(animations[this.aniName]['from']), animate(this.duration, style(animations[this.aniName]['to']))]).create(this.el.nativeElement);\n      let self = this;\n      this.player.onStart(function () {\n        self.el.nativeElement.classList.remove('appear-animate');\n      });\n    }\n    static {\n      this.ɵfac = function ContentAnimDirective_Factory(t) {\n        return new (t || ContentAnimDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AnimationBuilder));\n      };\n    }\n    static {\n      this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n        type: ContentAnimDirective,\n        selectors: [[\"\", \"contentAnim\", \"\"]],\n        hostBindings: function ContentAnimDirective_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"scroll\", function ContentAnimDirective_scroll_HostBindingHandler($event) {\n              return ctx.onscroll($event);\n            }, false, i0.ɵɵresolveWindow);\n          }\n        },\n        inputs: {\n          aniName: \"aniName\",\n          duration: \"duration\",\n          offset: \"offset\"\n        }\n      });\n    }\n  }\n  return ContentAnimDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}