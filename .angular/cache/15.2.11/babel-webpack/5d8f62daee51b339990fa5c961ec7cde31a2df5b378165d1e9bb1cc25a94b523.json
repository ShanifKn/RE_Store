{"ast":null,"code":"// RxJS\nimport { BehaviorSubject } from 'rxjs';\n// NGRX\nimport { select } from '@ngrx/store';\nimport { cartItemsSelector } from 'src/app/core/selectors/selectors';\nimport { AddToCartAction, RemoveFromCartAction, UpdateCartAction } from 'src/app/core/actions/actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"ngx-toastr\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor(store, toastrService) {\n      this.store = store;\n      this.toastrService = toastrService;\n      this.cartItems = [];\n      this.cartStream = new BehaviorSubject([]);\n      this.qtyTotal = new BehaviorSubject(0);\n      this.priceTotal = new BehaviorSubject(0);\n      store.pipe(select(cartItemsSelector)).subscribe(items => {\n        this.cartItems = items;\n        this.cartStream.next(items);\n        this.qtyTotal.next(this.cartItems.reduce((acc, cur) => {\n          return acc + cur.qty;\n        }, 0));\n        this.priceTotal.next(this.cartItems.reduce((acc, cur) => {\n          return acc + cur.sum;\n        }, 0));\n      });\n    }\n    // Product Add to Cart\n    addToCart(product, qty = 1) {\n      if (this.canAddToCart(product, qty)) {\n        this.store.dispatch(new AddToCartAction({\n          product,\n          qty\n        }));\n        this.toastrService.success('Product added to Cart.');\n      } else {\n        this.toastrService.error('Sorry, you can\\'t add that amount to the cart.');\n      }\n    }\n    // Product Removed from the Cart\n    removeFromCart(product) {\n      this.store.dispatch(new RemoveFromCartAction({\n        product\n      }));\n      this.toastrService.success('Product removed from Cart.');\n    }\n    // Cart update\n    updateCart(cartItems) {\n      this.store.dispatch(new UpdateCartAction({\n        cartItems\n      }));\n      this.toastrService.success('Cart Updated.');\n    }\n    // Check whether product is in Cart or not\n    isInCart(product) {\n      return this.cartItems.find(item => item.id == product.id) ? true : false;\n    }\n    // Check where product could be added to the cart\n    canAddToCart(product, qty = 1) {\n      var find = this.cartItems.find(item => item.id == product.id);\n      if (find) {\n        if (product.stock == 0 || product.stock && product.stock < find.qty + qty) return false;else return true;\n      } else {\n        if (product.stock == 0 || product.stock && product.stock < qty) return false;else return true;\n      }\n    }\n    static {\n      this.ɵfac = function CartService_Factory(t) {\n        return new (t || CartService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.ToastrService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: CartService,\n        factory: CartService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}